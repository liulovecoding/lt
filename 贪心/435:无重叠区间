**思路：**
在选择要保留区间时，区间的结尾很重要：选择的区间结尾越小，余留给其他区间的空间越大，就越能保留更多的区间。
因此，贪心策略为：优先保留结尾小且不相交的区间

**实现：**
先把区间按结尾的大小进行递增排序(自定义sort函数)，每次选择结尾最小且和前一个选择的区间不重叠的区间

**代码：**
```
class Solution {
public:
    // 按照区间右边界排序
    static bool cmp (const vector<int>& a, const vector<int>& b) {
        return a[1] < b[1];
    }
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        if (intervals.size() == 0) return 0;
        sort(intervals.begin(), intervals.end(), cmp);
        int count = 1; // 记录非交叉区间的个数
        int end = intervals[0][1]; // 记录区间分割点
        for (int i = 1; i < intervals.size(); i++) {
            if (end <= intervals[i][0]) {
                end = intervals[i][1];
                count++;
            }
        }
        return intervals.size() - count;
    }
};
```
 
 
 

**复杂度**
1.时间复杂度：O(nlogn) ，有一个快排
2.空间复杂度：O(1)
